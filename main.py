import requests
from bs4 import BeautifulSoup
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk, Text
from xml.etree import ElementTree as ET

# List of common SQL injection and XSS payloads
payloads = ["' OR '1'='1", "<script>alert(1)</script>"]

# List of common weak passwords
weak_passwords = ["password", "123456", "123456789", "12345678", "12345", "1234", "1234567", "1234567890", "admin", "letmein"]

# XXE payload
xxe_payload = """<?xml version="1.0"?>
<!DOCTYPE root [
<!ENTITY test SYSTEM "file:///etc/passwd">
]>
<root>&test</root>; """

# List of Default pages
default_pages = ['default.html', 'default.php', 'index.html', 'index.php']

# List of Directories 
dirs = ['/', '/admin/', '/uploads/', '/images/']

# String of Insecure Deserialization payload
deserialization_payload = b"\x80\x04\x95\x08\x00\x00\x00\x00\x00\x00\x00\x8c\x04test\x94."


# Function to scan for vulnerabilities
def scan_website(url):
    vulnerabilities = []
    try:
        # Make a request to the URL
        response = requests.get(url)
        
        # Check for SQL injection vulnerabilities
        for payload in payloads:
            sql_test_url = f"{url}?id={payload}"
            sql_response = requests.get(sql_test_url)
            if "syntax" in sql_response.text.lower() or "mysql" in sql_response.text.lower():
                vulnerabilities.append(f"Potential SQL Injection vulnerability detected with payload: {payload}")


        # Check for XSS vulnerabilities
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        for form in forms:
            action = form.get('action')
            inputs = form.find_all('input')
            for input_tag in inputs:
                name = input_tag.get('name')
                if name:
                    xss_test_url = f"{url}{action}?{name}={payload}"
                    xss_response = requests.get(xss_test_url)
                    if payload in xss_response.text:
                        vulnerabilities.append(f"Potential XSS vulnerability detected with payload: {payload}")


        # Check for Broken Authentication vulnerabilities
            # Check for weak password acceptance
        for password in weak_passwords:
            response = requests.post(url, data={"username": "admin", "password": password})
            if "login successful" in response.text.lower():
                vulnerabilities.append(f"Weak password accepted: {password}")

            # Check for session management issues
        session = requests.Session()
        response = session.post(url, data={"username": "admin", "password": "correct_password"})
        if "login successful" in response.text.lower():
            # Check if session ID changes after logout
            session_id_before_logout = session.cookies.get("sessionid")
            session.get(f"{url}/logout")
            session_id_after_logout = session.cookies.get("sessionid")
            if session_id_before_logout == session_id_after_logout:
                vulnerabilities.append("Session ID did not change after logout, indicating session management issues.")
        
            # Check if secure cookies are used
            if not session.cookies.get_dict().get("Secure"):
                vulnerabilities.append("Session cookies are not marked as secure.")
            if not session.cookies.get_dict().get("HttpOnly"):
                vulnerabilities.append("Session cookies are not marked as HttpOnly.")


        # Check for XXE vulnerabilities
        headers = {'Content-Type': 'application/xml'}
        response = requests.post(url, data=xxe_payload, headers=headers)
        if 'root' in response.text and 'DOCTYPE' in response.text:
            vulnerabilities.append("Potential XXE vulnerability detected.")


        # Check for Security Misconfigurations vulnerabilities
        for page in default_pages:
            test_url = f"{url}/{page}"
            response = requests.get(test_url)
            if response.status_code == 200:
                vulnerabilities.append(f"Default page found {test_url}")

        # Check for Directory Listing
        # dirs = ['/', '/admin/', '/uploads/', '/images/']
        for directory in dirs:
            dir_url = f"{url}{directory}"
            response = requests.get(dir_url)
            if "Index of" in response.text or response.status_code == 403:
                vulnerabilities.append(f"Directory listing enabled for: {dir_url}")


        # Check for Broken Access Control vulnerabilities
        restricted_urls = [
            f"{url}/admin",
            f"{url}/config",
            f"{url}/settings"
        ]
        for each_url in restricted_urls:
            restricted_response = session.get(each_url)
            if restricted_response.status_code == 200:
                vulnerabilities.append(f"Access to restricted URL without proper authentication: {each_url}")


        # Check for Cryptographic Failures 
        if not url.startswith("https"):
            vulnerabilities.append("The website does not use HTTPS, which can lead to Cryptographic failures")

        # Checking for Weak SSL/TSL configurations
        response = requests.get(url)
        if response.raw.version < 2:
            vulnerabilities.append("The website uses an outdated version of SSL/TSL")

        # Checking for Weak Encryption in cookies
        if "sessionid" in session.cookies:
            cookie = session.cookies.get("sessionid")
            if len(cookie) < 20:
                vulnerabilities.append("The session ID appears to be too short, indicating Weak Encryption")


        # Check for Insecure Deserialization vulnerabilities
        deserialization_test_url = f"{url}/deserialize"
        deserialization_response = requests.post(deserialization_test_url, data=deserialization_payload)
        if "test" in deserialization_response.text:
            vulnerabilities.append("Potential Insecure Deserialization vulnerability is detected")


        # Check for Vulnerable and Outdated Components
        vulnerable_components = {
            "jquery": "1.12.4", 
            "bootstrap": "3.3.7"
        } 
        scripts = soup.find('script')
        for script in scripts:
            if 'src'in script.attrs:
                for component, vulnerable_version in vulnerable_components.items():
                    if component in script.attrs['src'] and vulnerable_version in script.attrs['src']:
                        vulnerabilities.append(f"Potential vulnerable component detected: {component} version {vulnerable_version}")

    except Exception as e:
        vulnerabilities.append(f"Error scanning the website: {str(e)}")
    
    return vulnerabilities

# Function to generate PDF report
def generate_pdf_report(url, vulnerabilities):
    c = canvas.Canvas("Vulnerability_Report.pdf", pagesize=letter)
    width, height = letter

    c.drawString(30, height - 30, f"Vulnerability Report for {url}")
    y_position = height - 60

    if vulnerabilities:
        for vuln in vulnerabilities:
            c.drawString(30, y_position, vuln)
            y_position -= 15
    else:
        c.drawString(30, y_position, "No vulnerabilities found.")

    c.save()

# Function to start scan from the GUI
def start_scan():
    url = url_entry.get()
    vulnerabilities = scan_website(url)
    generate_pdf_report(url, vulnerabilities)
    messagebox.showinfo("Scan Complete", "The scan is complete and the report has been generated.")



# Create the main window and set the title as 'Vuln. Scanner'
root = tk.Tk()
root.title("Vulnerability Scanner")
# Width x Hieght
root.geometry("1000x790")                    

# Create a frame for the URL entry and button
frame = ttk.Frame(root, padding="10 10 10 10")
frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
frame.columnconfigure(0,weight=1)
frame.rowconfigure(0,weight=1)

# Add a label and URL entry
ttk.Label(frame, text="Website URL:", font=("Helvetica", 12)).grid(row=0, column=0, sticky=tk.W, pady=10)
url_entry = ttk.Entry(frame, width=50, font=("Helvetica", 12))
url_entry.grid(row=0, column=1, pady=10, padx=10)

# Scan button
scan_button = ttk.Button(frame, text="Start Scan", command=start_scan, style="TButton")
scan_button.grid(row=1, column=0, columnspan=2, pady=20)

# Create a text widget for displaying results
result_text = Text(frame, height=30, width=80, wrap="word", font=("Helvetica", 12))
result_text.grid(row=2, column=0, columnspan=2, pady=10, padx=10)
result_text.insert(tk.END, "Scan results will be displayed here.\n")

# Run the application
root.mainloop()
   
